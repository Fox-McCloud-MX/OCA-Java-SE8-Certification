page 71 to 85

My Answers:

1  - B [OK]
2  - B [OK]
3  - A [FAIL]
4  - C [OK]
5  - C [OK]
6  - A [OK]
7  - C [OK]
8  - B [OK]
9  - B [OK] 
10 - B [OK]
11 - B [OK]
12 - D [FAIL]
13 - C [FAIL]
14 - C [OK]
15 - A [OK]
16 - C [OK]
17 - D [FAIL]
18 - A [OK]
19 - B [OK]
20 - B [OK]
21 - B [OK]
22 - D [OK]
23 - C [OK]
24 - C [OK]
25 - A [FAIL]
26 - B [OK]
27 - D [OK]
28 - B [FAIL]
29 - C [OK] 
30 - B [OK]
31 - C [OK]
32 - A [FAIL]
33 - D [OK]
34 - C [OK]
35 - D [OK]
36 - C [OK]
37 - D [OK]
38 - D [OK]
39 - B [OK]
40 - B [OK]
41 - D [OK]
42 - C [FAIL]
43 - A [OK]
44 - C [OK]
45 - A [OK]
46 - B [OK]
47 - A [OK]
48 - A [OK]
49 - B [OK]
50 - C [OK] REVIEW

42/50 = 84.00% [PASSED]

Incorrect Answer.

Answers page 439

3. D. Trick question! While int is a primitive, all arrays are objects. One way to tell is
that an array has a public instance variable called length. Another way is that you can
assign it a variable of type Object. Therefore, Option D is correct.

12. C. When using an array initializer, you are not allowed to specify the size separately.
The size is inferred from the number of elements listed. Therefore, tiger and ohMy are
incorrect. When you’re not using an array initializer, the size is required. An empty
array initializer is allowed. Option C is correct because lion and bear are legal.

13. B. Since no elements are being provided when creating the arrays, a size is required.
Therefore, lion and bear are incorrect. The braces containing the size are required to
be after the type, making ohMy incorrect. The only one that is correct is tiger, making
the correct answer Option B.

17. B. The code sorts before calling binarySearch(), so it meets the precondition for that
method. The target string of "Mac" is the second element in the sorted array. Since
array indices begin with zero, the second position is index 1, and Option B is correct.

25. C. Calling toString() on an array doesn’t output the contents of the array, making
Option C correct. If you wanted Option A to be the answer, you’d have to call
Arrays.toString(strings).

28. D. Line 6 assigns an int to a cell in a 2D array. This is fine. Line 7 casts to a general
Object[]. This is dangerous, but legal. Why is it dangerous, you ask? That brings us to
line 8. The compiler can’t protect us from assigning a String to the int[] because the
reference is more generic. Therefore, line 8 throws an ArrayStoreException because
the type is incorrect, and Option D is correct. You couldn’t have assigned an int on
line 8 either because obj[3] is really an int[] behind the scenes and not an int.

45. A. In Java, arrays are indexed starting with 0. While it is unusual for the loop to start
with 1, this does not cause an error. It does cause the code to output six lines instead
of seven since the loop doesn’t cover the first array element. Therefore, Option A is
correct.
