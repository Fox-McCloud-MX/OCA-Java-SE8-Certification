page 119 to 134

My Answers:

1  - B [FAIL]
2  - B [OK]
3  - C [OK]
4  - B [OK]
5  - A [OK]
6  - B [OK]
7  - D [FAIL]
8  - D [OK]
9  - D [FAIL]
10 - C [OK]
11 - C [OK]
12 - A [OK] 
13 - B [OK] 
14 - C [OK] 
15 - B [OK]
16 - C [OK]
17 - C [AMBIGUOUS] book isn't correct
18 - D [FAIL]
19 - C [FAIL]
20 - C [OK]
21 - A [OK]
22 - A [FAIL]
23 - C [OK]
24 - C [OK]
25 - A [OK]
26 - B [OK]
27 - C [OK]
28 - C [OK]
29 - A [OK]
30 - A [OK]
31 - A [OK]
32 - C [OK]
33 - C [OK]
34 - C [OK]
35 - B [OK]
36 - B [OK]
37 - C [OK]
38 - A [OK]
39 - B [OK] 
40 - D [FAIL]
41 - D [OK]
42 - C [OK]
43 - B [OK]
44 - A [OK]
45 - A [FAIL]
46 - A [FAIL]
47 - D [OK]
48 - D [FAIL]
49 - A [FAIL]
50 - C [OK]

20/50 = 40.00% [FAILED]

Incorrect Answer.

Answers page 458

1. C. The code does not compile, so Option A is incorrect. This code does not compile for
two reasons. First, the name variable is marked private in the Cinema class, which
means it cannot be accessed directly in the Movie class. Next, the Movie class defines a
constructor that is missing an explicit super() statement. Since Cinema does not
include a no-argument constructor, the no-argument super() cannot be inserted
automatically by the compiler without a compilation error. For these two reasons, the
code does not compile, and Option C is the correct answer.

7. B. The drive() method in the Car class does not override the version in the Automobile
class since the method is not visible to the Car class. Therefore, the final attribute in
the Automobile class does not prevent the Car class from implementing a method with
the same signature. The drive() method in the ElectricCar class is a valid override of
the method in the Car class, with the access modifier expanding in the subclass. For
these reasons, the code compiles, and Option D is incorrect. In the main() method, the
object created is an ElectricCar, even if it is assigned to a Car reference. Due to
polymorphism, the method from the ElectricCar will be invoked, making Option B
the correct answer.

9. C. There are three problems with this method override. First, the watch() method is
marked final in the Television class. The final modifier would have to be removed
from the method definition in the Television class in order for the method to compile
in the LCD class. Second, the return types void and Object are not covariant. One of
them would have to be changed for the override to be compatible. Finally, the access
modifier in the child class must be the same or broader than in the parent class. Since
package-private is narrower than protected, the code will not compile. For these
reasons, Option C is the correct answer.

[in java 8 interface can contain default and static method]
17. D. An abstract class can contain both abstract and concrete methods, while an
interface can only contain abstract methods. With Java 8, interfaces can now have
static and default methods, but the question specifically excludes them, making
Option D the correct answer. Note that concrete classes cannot contain any abstract
methods.

18. C. The code does not compile, so Option D is incorrect. The IsoscelesRightTriangle
class is abstract; therefore, it cannot be instantiated on line g3. Only concrete classes
can be instantiated, so the code does not compile, and Option C is the correct answer.
The rest of the lines of code compile without issue. A concrete class can extend an
abstract class, and an abstract class can extend a concrete class. Also, note that the
override of getDescription() has a widening access modifier, which is fine per the
rules of overriding methods.

19. D. The play() method is overridden in Saxophone for both Horn and Woodwind, so the
return type must be covariant with both. Unfortunately, the inherited methods must
also be compatible with each other. Since Integer is not a subclass of Short, and vice
versa, there is no subclass that can be used to fill in the blank that would allow the
code to compile. In other words, the Saxophone class cannot compile regardless of its
implementation of play(), making Option D the correct answer.

22. B. Options A and C are both true statements. Either the unknownBunny reference
variable is the same as the object type or it can be explicitly cast to the Bunny object
type, therefore giving it access to all its members. This is the key distinction between
reference types and object types. Assigning a new reference does not change the
underlying object. Option D is also a true statement since any superclass that Bunny
extends or interface it implements could be used as the data type for unknownBunny.
Option B is the false statement and the correct answer. An object can be assigned to a
reference variable type that it inherits, such as Object unknownBunny = new Bunny().

30. C. Both of these descriptions refer to variable and static method hiding, respectively,
making Option C correct. Only instance methods can be overridden, making Options A
and B incorrect. Option D is also incorrect because replacing is not a real term in this
context.

40. A. The code compiles without issue, so Option D is incorrect. Java allows methods to
be overridden, but not variables. Therefore, marking them final does not prevent
them from being reimplemented in a subclass. Furthermore, polymorphism does not
apply in the same way it would to methods as it does to variables. In particular, the
reference type determines the version of the secret variable that is selected, making
the output 2 and Option A the correct answer.

[very specific question about covariant return types]
45. D. Trick question! Option A seems like the correct answer, but the second part of the
sentence is false, regardless of whether you insert overloaded or overridden.
Overridden methods must have covariant return types, which may not be exactly the
same as the type in the parent class. Therefore, Option D is the correct answer.

46. B. If a parent class does not include a no-argument constructor, a child class can still
explicitly declare one; it just has to call an appropriate parent constructor with
super(), making Option A incorrect. If a parent class does not include a no-argument
constructor, the child class must explicitly declare a constructor, since the compiler
will not be able to insert the default no-argument constructor, making Option B
correct. Option C is incorrect because a parent class can have a no-argument
constructor, while its subclasses do not. If Option C was true, then all classes would be
required to have no-argument constructors since they all extend java.lang.Object,
which has a no-argument constructor. Option D is also incorrect. The default noargument
constructor can be inserted into any class that directly extends a class that
has a no-argument constructor. Therefore, no constructors in the subclass are
required.

48. A. The play() method is overridden in Violin for both MusicCreator and
StringInstrument, so the return type must be covariant with both. Long is a subclass of
Number, and therefore, it is covariant with the version in MusicCreator. Since it
matches the type in StringInstrument, it can be inserted into the blank and the code
would compile. While Integer is a subclass of Number, meaning the override for
MusicCreator is valid, it is not a subclass of Long used in StringInstrument. Therefore,
using Integer would cause the code to not compile. Finally, Number is compatible with
the version of the method in MusicCreator but not with the version in
StringInstrument, because Number is a superclass of Long, not a subclass. For these
reasons, Long is the only class that allows the code to compile, making Option A the
correct answer.

49. B. The primary motivation for adding default interface methods to Java was for
backward compatibility. These methods allow developers to update older classes with
a newer version of an interface without breaking functionality in the existing classes,
making Option B the correct answer. Option is A is nonsensical and not the correct
answer. Options C and D sound plausible, but both could be accomplished with static
interface methods alone.
