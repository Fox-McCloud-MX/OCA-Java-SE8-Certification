page 135 to 153

My Answers:

1  - D [OK]
2  - B [OK]
3  - D [OK]
4  - A [OK]
5  - A [FAIL]
6  - B [OK]
7  - A [OK]
8  - A [OK]
9  - C [OK]
10 - C [OK]
11 - B [OK]
12 - A [OK]
13 - C [OK]
14 - C [OK]
15 - C [OK]
16 - B [OK]
17 - A [FAIL]
18 - D [FAIL]
19 - D [OK]
20 - C [OK]
21 - B [OK]
22 - C [FAIL]
23 - D [FAIl]
24 - D [FAIL]
25 - C [FAIL]
26 - B [OK]
27 - C [OK]
28 - D [OK]
29 - B [OK] book isn't correct
30 - D [OK]
31 - C [FAIL]
32 - A [OK]
33 - B [FAIL]
34 - C [OK]
35 - B [OK]
36 - A [OK]
37 - C [OK]
38 - C [OK]
39 - B [FAIL]
40 - D [OK]
41 - C [OK]
42 - D [OK]
43 - D [OK]
44 - D [OK]
45 - C [OK]
46 - D [OK]
47 - D [OK]
48 - D [OK]
49 - A [OK]
50 - B [OK]

40/50 = 80.00% [xxx]

Incorrect Answer.

Answers page 465

5. D. The application does not compile because score is defined only within the try
block. The other three places it is referenced, in the catch block, in the finally block,
and outside the try-catch-finally block at the end, are not in scope for this variable and
each does not compile. Therefore, the correct answer is Option D.

[throw t need to change to throw aioobe]
9. C. The application first enters the try block and outputs A. It then throws a
RuntimeException, but the exception is not caught by the catch block since
RuntimeException is not a subclass of ArrayIndexOutOfBoundsException (it is a
superclass). Next, the finally block is called and C is output. Finally, the
RuntimeException is thrown by the main() method and a stack trace is printed. For
these reasons, Option C is correct..

17. D. The code does not compile because the catch block uses parentheses () instead of
brackets {}, making Option D the correct answer. Note that Boat does not extend
Transport, so while the override on line j1 appears to be invalid since Exception is a
broader checked exception than CapsizedException, that code compiles without issue.
If the catch block was fixed, the code would output 4, making Option A the correct
answer.

18. B. Overridden methods cannot throw new or broader checked exceptions than the one
they inherit. Since Exception is a broader checked exception than PrintException,
Option B is not allowed and is the correct choice. Alternatively, declaring narrower or
the same checked exceptions or removing them entirely is allowed, making Options A
and C incorrect. Since Option B is correct, Option D is incorrect.

22. B. The application does not compile, so Option D is incorrect. The checked
KnightAttackingException thrown in the try block is handled by the associated catch
block. The ClassCastException is an unchecked exception, so it is not required to be
handled or declared and line q1 compiles without issue. The finally block throws a
checked CastleUnderSiegeException, which is required to be handled or declared by
the method, but is not. There is no try-catch around line q2, and the method does not
declare a compatible checked exception, only an unchecked exception. For this reason,
line q2 does not compile, and Option B is the correct answer. Lastly, line q3 compiles
without issue because the unchecked RuntimeException is not required to be handled
or declared by the call in the main() method.

23. A. If an exception matches multiple catch blocks, the first one that it encounters will
be the only one executed, making Option A correct, and Options B and C incorrect.
Option D is also incorrect. It is possible to write two consecutive catch blocks that can
catch the same exception, with the first type being a subclass of the second. In this
scenario, an exception thrown of the first type would match both catch blocks, but
only the first catch block would be executed, since it is the more specific match.

24. C. The code does not compile due to the call to compute() in the main() method. Even
though the compute() method only throws an unchecked exception, its method
declaration includes the Exception class, which is a checked exception. For this
reason, the checked exception must be handled or declared in the main() method in
which it is called. While there is a try-catch block in the main() method, it is only for
the unchecked NullPointerException. Since Exception is not a subclass of
NullPointerException, the checked Exception is not properly handled or declared and
the code does not compile, making Option C the correct answer.

25. D. A NullPointerException can be thrown if the value of list is null. Likewise, an
ArrayIndexOutOfBoundsException can be thrown if the value of list is an array with
fewer than 10 elements. Finally, a ClassCastException can be thrown if list is
assigned an object that is not of type Boolean[]. For example, the assignment list =
(Boolean[]) new Object() will compile without issue but throws a
ClassCastException at runtime. Therefore, the first three options are possible, making
Option D the correct answer.

[try statement requires one or more catch block]
29. A. A try statement is not required to have a finally block, but if it does, there can be
at most one. Furthermore, a try statement can have any number of catch blocks or
none at all. For these reasons, Option A is the correct answer.

31. B. If both the catch and finally blocks throw an exception, the one from the finally
block is propagated to the caller, with the one from the catch block being dropped,
making Option B the correct answer. Note that Option C is incorrect due to the fact
that only one exception can be thrown to the caller.

33. A. Although this code uses the RuntimeException and Exception classes, the question
is about casting. Exception is not a subclass of RuntimeException, so the assignment
on the second line throws a ClassCastException at runtime, making Option A correct.

35. B. If both values are valid non-null String objects, then no exception will be thrown,
with the statement in the finally block being executed first, before returning control
to the main() method; therefore, the second statement is a possible output. If either
value is null, then the toString() method will cause a NullPointerException to be
thrown. In both cases, the finally block will execute first, printing Posted:, even if
there is an exception. For this reason, the first statement is not a possible output, and
Option B is correct.
